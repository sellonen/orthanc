Palanthir - A Lightweight, RESTful DICOM Server
===============================================


Dependencies
------------

1) CMake: Palanthir uses CMake (http://www.cmake.org/) to automate its
   building process. 

2) Python: Some code is autogenerated through Python
   (http://www.python.org/).

3) Mercurial: To use the cutting edge code, a Mercurial client must be
   installed (http://mercurial.selenic.com/). We recommand TortoiseHg.

W) 7-Zip: For the native build under Windows, the 7-Zip tool is used
   to uncompress the third-party packages (http://www.7-zip.org/).

You thus have to download and install CMake, Python, Mercurial and
possibly 7-Zip first. The path to their executable must be in the
"PATH" environment variable.

The other third party dependencies are automatically downloaded by the
CMake scripts. The downloaded packages are stored in the
"ThirdPartyDownloads" directory.


Building Palanthir at a glance
------------------------------

To build Palanthir, you must:

1) Download the source code (either using Mercurial, or through the
   released versions). For the examples below, we assume the source
   directory is "~/Palanthir".

2) Create a build directory. For the examples below, we assume the
   build directory is "~/PalanthirBuild".



Native Linux Compilation
------------------------

To build binaries with debug information:

# cd ~/PalanthirBuild
# cmake -DCMAKE_BUILD_TYPE=DEBUG ~/Palanthir
# make
# make doc


To build a release version:

# cd ~/PalanthirBuild
# cmake -DCMAKE_BUILD_TYPE=RELEASE ~/Palanthir
# make
# make doc


Under Linux, you have the possibility to dynamically link Palanthir
against the shared libraries of your system, provided their version is
recent enough. This greatly speeds up the compilation:

# cd ~/PalanthirBuild
# cmake -DSTATIC_BUILD=OFF -DCMAKE_BUILD_TYPE=DEBUG ~/Palanthir
# make

 

Cross-Compilation for Windows under Linux
-----------------------------------------

To cross-compile Windows binaries under Linux using MinGW, please use
the following command:

# cd ~/PalanthirBuild
# cmake -DCMAKE_TOOLCHAIN_FILE=~/Palanthir/Resources/MinGWToolchain.cmake -DCMAKE_BUILD_TYPE=DEBUG ~/Palanthir
# make



Native Windows build with MinGW (VERY SLOW)
-------------------------------------------

# cd [...]\PalanthirBuild
# cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=DEBUG [...]\Palanthir
# mingw32-make



Native Windows build with Microsoft Visual Studio 2005
------------------------------------------------------

# cd [...]\PalanthirBuild
# cmake -G "Visual Studio 8 2005" [...]\Palanthir

Then open the "[...]/PalanthirBuild/Palanthir.sln" with Visual Studio.

NOTES:
* More recent versions of Visual Studio should also work.
* You might have to install the Platform SDK (version 6 or above):
  http://en.wikipedia.org/wiki/Microsoft_Windows_SDK.
  Read the CMake FAQ: http://goo.gl/By90B 
